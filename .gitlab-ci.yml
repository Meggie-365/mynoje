workflow:
  rules:
    - if: $CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE != "merge_request_event"
      when: never
    - when: always

variables:
  IMAGE_NAME: "$CI_REGISTRY_IMAGE"
  #IMAGE_TAG: "1.1"
  DEV_SERVER_HOST: 40.71.116.14
  DEV_ENDPOINT: http://40.71.116.14:3000/

stages:
  - "test"
  - "build"
  - "deploy"

run_unit_test:
  image: node:18-alpine3.15
  stage: test
  cache:
    key: "$CI_COMMIT_REF_NAME"
    paths:
      - app/node_modules
  tags:
    - "docker"
  before_script:
    - cd app
    - npm install
  script:
    - npm test
  artifacts:
    paths:
      - "app/junit.xml"
    when: always
    reports:
      junit: app/junit.xml

## A linter is a static code analysis tool
## It checks your source code for programming errors and stylistic errors
run_lint_checks:
  stage: test
  image: node:18-alpine3.15
  cache:
    key: "$CI_COMMIT_REF_NAME"
    paths:
      - app/node_modules
    policy: pull
  tags:
    - "docker"
  before_script:
    - cd app
    - npm install
  script:
    - echo "Running lint checks"

sast:
  stage: test 

build_image:
  stage: build
  tags:
    - shell
    - vm
  before_script:
    - export PACKAGE_JSON_VERSION=$(cat app/package.json | jq -r .version)
    - export VERSION=$PACKAGE_JSON_VERSION.$CI_PIPELINE_IID
    - echo $VERSION > version-file.txt
  script:
    - docker build -t $IMAGE_NAME:$VERSION .
  artifacts:
    paths:
      - version-file.txt

push_image:
  stage: build
  needs:              # push_image waits for build_image job to complete
    - build_image
  dependencies:       # push_image needs artifact from build_image job
    - build_image
  tags:
    - shell
    - vm
  before_script:
    - export VERSION=$(cat version-file.txt)
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin  $CI_REGISTRY
  script:
    - docker push $IMAGE_NAME:$VERSION

deploy_to_dev:
  stage: deploy
  tags:
    - shell
    - vm
  before_script:
    - chmod 400 $SSH_PRIVATE_KEY
    - export VERSION=$(cat version-file.txt)
  script:
    - scp -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ./docker-compose.yaml azureuser@$DEV_SERVER_HOST:~
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY azureuser@$DEV_SERVER_HOST "
        echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin  $CI_REGISTRY &&
        
        export DC_IMAGE_NAME=$IMAGE_NAME &&
        export DC_IMAGE_TAG=$VERSION &&
        
        docker-compose down &&
        docker-compose up -d"
  environment:
    name: development
    url: $DEV_ENDPOINT


include:
  - template: Jobs/SAST.gitlab-ci.yml
